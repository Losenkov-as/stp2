@page "/machinetypes"
@inject IAccountService AccountService
@inject IStatusService StatusService
@inject IMachineTypeService MachineTypeService
@inject IMachineModelService MachineModelService


<h1>Типы станков</h1>
<NavLink href="machinetypes/add" class="btn btn-sm btn-success mb-2">Добавить тип станка</NavLink>
<table class="table table-striped table-sm table-responsive table-hover">
    <thead>
        <tr>
            <th scope="col">Тип станка</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @if ((machinetypes != null))
        {

            foreach (var machinetypes in machinetypes)
            {
                <tr>
                    <td>@machinetypes.Name</td>

                </tr>
            }

        }
        @if (loading)
        {
            <tr>
                <td colspan="4" class="text-center">
                    <span class="spinner-border spinner-border-lg align-center"></span>
                </td>
            </tr>
        }
    </tbody>
</table>

<h1>Модель станка</h1>
<NavLink href="machinemodels/add" class="btn btn-sm btn-success mb-2" >Добавить модель</NavLink>
<table class="table table-striped table-sm table-responsive table-hover">
    <thead>
        <tr>
            <th scope="col">модель</th>
            <th scope="col">тип</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @if ((machinemodels != null))
        {

            foreach (var machinemodels in machinemodels)
            {
        <tr>
            <td>@machinemodels.Name</td>
            <td>@machinemodels.machinetype.Name</td>
        </tr>
            }

        }
        @if (loading)
        {
            <tr>
                <td colspan="4" class="text-center">
                    <span class="spinner-border spinner-border-lg align-center"></span>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool loading;
    private IList<MachineType> machinetypes;
    private IList<MachineModel> machinemodels;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        machinetypes = await MachineTypeService.GetAll();
        machinemodels = await MachineModelService.GetAll();
        loading = false;
    }

    //private async void DeleteBuild(string id)
    //{
    //    var build = builds.First(x => x.Id == id);
    //    build.IsDeleting = true;
    //    await BuildService.Delete(id);
    //    builds.Remove(build);
    //    StateHasChanged();
    //}
}