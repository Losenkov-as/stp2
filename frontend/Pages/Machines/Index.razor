@page "/machines"
@inject IAccountService AccountService
@inject IStatusService StatusService
@inject IMachineService MachineService


<h1>Станки</h1>
<NavLink href="machines/add" class="btn btn-sm btn-success mb-2">Добавить станок</NavLink>
<table class="table table-striped table-sm table-responsive table-hover">
    <thead>
        <tr>
            <th scope="col">Инвентарный номер</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @if (machines != null)
        {
            foreach (var machine in machines)
            {
        <tr>
            <td>@machine.InventoryNumber</td>

          
            @*<td>
            @foreach (Role role in user.roles)
            {
                if (user.roles.ToArray().Length > 1)
                    @string.Concat(role.Name, ", ")
                    else
                        @role.Name;

                    }
        </td>*@

            <td style="white-space: nowrap">
                <NavLink href="@($"machines/edit/{machine.Id}")" class="btn btn-sm btn-primary mr-1">Редактировать</NavLink>
                <button @onclick="@(() => DeleteMachine(machine.Id))" disabled="@machine.IsDeleting" class="btn btn-sm btn-danger ">
                    @if (machine.IsDeleting)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                    }
                    else
                    {
                        <span>Удалить</span>
                    }
                </button>
            </td>
        </tr>
            }
        }
        @if (loading)
        {
            <tr>
                <td colspan="4" class="text-center">
                    <span class="spinner-border spinner-border-lg align-center"></span>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool loading;
    private IList<Machine> machines;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        machines = await MachineService.GetAll();
        loading = false;
    }

    private async void DeleteMachine(string id)
    {
        var machine = machines.First(x => x.Id == id);
        machine.IsDeleting = true;
        await MachineService.Delete(id);
        machines.Remove(machine);
        StateHasChanged();
    }
}