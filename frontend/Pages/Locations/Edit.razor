@page "/locations/edit/{Id}"
@inject IAlertService AlertService
@inject IAccountService AccountService
@inject ILocationService LocationService
@inject NavigationManager NavigationManager

<h1>Редактировать местоположение</h1>
@if (model != null)
{
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-row">
            <div class="form-group col">
                <label>First Name</label>
                <InputText @bind-Value="model.Room" class="form-control" />
                <ValidationMessage For="@(() => model.Room)" />
            </div>
            <div class="form-group col">
                <label>Last Name</label>
                <InputText @bind-Value="model.Build" class="form-control" />
                <ValidationMessage For="@(() => model.Build)" />
            </div>
        </div>
        
        <div class="form-group">
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Save
            </button>
            <NavLink href="users" class="btn btn-link">Cancel</NavLink>
        </div>
    </EditForm>
}
else
{
    <div class="text-center p-3">
        <span class="spinner-border spinner-border-lg align-center"></span>
    </div>
}

@code {
    private EditLocation model;
    private bool loading;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var location = await LocationService.GetById(Id);
        model = new EditLocation(location);
    }

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            await LocationService.Update(Id, model);
            AlertService.Success("Update successful", keepAfterRouteChange: true);
            NavigationManager.NavigateTo("locations");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}