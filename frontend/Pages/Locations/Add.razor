@page "/locations/add"
@inject IAlertService AlertService
@inject IAccountService AccountService
@inject ILocationService LocationService
@inject NavigationManager NavigationManager

<h1>Добавить местоположение</h1>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col">
            <label>Помещение</label>
            <InputText @bind-Value="model.Room" class="form-control" />
            <ValidationMessage For="@(() => model.Room)" />
        </div>
        <div class="form-group col">
            <label>Здание</label>
            <InputText @bind-Value="model.Build" class="form-control" />
            <ValidationMessage For="@(() => model.Build)" />
        </div>
   

    </div>
    
    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Сохранить
        </button>
        <NavLink href="locations" class="btn btn-link">Отмена</NavLink>
    </div>
</EditForm>

@code {
    private AddLocation model = new AddLocation();
    private bool loading;

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            await LocationService.Create(model);
            AlertService.Success("Местоположение успешно добавлено", keepAfterRouteChange: true);
            NavigationManager.NavigateTo("locations");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}