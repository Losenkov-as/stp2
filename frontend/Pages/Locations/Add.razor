@using Microsoft.AspNetCore.Components.Web
@page "/locations/add"
@inject IAlertService AlertService
@inject IAccountService AccountService
@inject ILocationService LocationService
@inject NavigationManager NavigationManager


<h1>Добавить местоположение</h1>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col">
            <label>Помещение</label>
            <InputText @bind-Value="model.Plot" class="form-control" />
            <ValidationMessage For="@(() => model.Plot)" />
        </div>
        <div class="form-group col">
            <label>Здание</label>
            <InputText @bind-Value="model.Workshop" class="form-control" />
            <ValidationMessage For="@(() => model.Workshop)" />
        </div>
        <div class="form-group col">
            <br>
            <label>Табельный номер сотрудника</label>
            <select @bind="model.User" class="form-select">
                @if (users != null)
                {
                    @foreach (var user in users)
                    {
                        <option @key="user.Id" value="@user.Id">@user.Id</option>
                    }
                }
            </select>

        </div>
    </div>

    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>

            }
            Сохранить
        </button>
        <NavLink href="locations" class="btn btn-link">Отмена</NavLink>
    </div>

</EditForm>

@code {
    public AddLocation model = new AddLocation();
    public int myHolder;
    private IList<User> users;

    private bool loading;

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            await LocationService.Create(model);
            AlertService.Success("Местоположение успешно добавлено", keepAfterRouteChange: true);
            NavigationManager.NavigateTo("locations");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        users = await AccountService.GetAll();
        model.User = users.First().Id;
        loading = false;
    }
}