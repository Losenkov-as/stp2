@page "/locations"
@inject IAccountService AccountService
@inject ILocationService LocationService

<h1>Местоположения</h1>
<NavLink href="locations/add" class="btn btn-sm btn-success mb-2">Добавить местоположение</NavLink>
<table class="table table-striped table-sm table-responsive table-hover">
    <thead>
        <tr>
            <th scope="col">Помещение</th>
            <th scope="col">Здание</th>
            <th scope="col">Сотрудник</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @if (locations != null)
        {
            foreach (var location in locations)
            {
        <tr>
            <td>@location.Plot</td>
            <td>@location.Workshop</td>
            <td>@location.User.Username</td>
            @*<td>
            @foreach (Location role in user.roles)
            {
                if (user.roles.ToArray().Length > 1)
                    @string.Concat(role.Name, ", ")
                    else
                        @role.Name;

                    }


        </td>*@

            <td style="white-space: nowrap">
                <NavLink href="@($"locations/edit/{location.Id}")" class="btn btn-sm btn-primary mr-1">Редактировать</NavLink>
                <button @onclick="@(() => DeleteLocation(location.Id))" disabled="@location.IsDeleting" class="btn btn-sm btn-danger ">
                    @if (location.IsDeleting)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                    }
                    else
                    {
                        <span>Удалить</span>
                    }
                </button>
            </td>
        </tr>
            }
        }
        @if (loading)
        {
            <tr>
                <td colspan="4" class="text-center">
                    <span class="spinner-border spinner-border-lg align-center"></span>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool loading;
    private IList<Location> locations;
    //private User user_to_show = new User();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        locations = await LocationService.GetAll();

        //foreach (Location location in locations)
        //{
        //    location.User = AccountService.GetById(location.User.Id);
        //}
        loading = false;
    }

    private async void DeleteLocation(string id)
    {
        var location = locations.First(x => x.Id == id);
        location.IsDeleting = true;
        await LocationService.Delete(id);
        locations.Remove(location);
        StateHasChanged();
    }
}