@page "/maintenance/exe"
@attribute [Authorize]
@inject IAlertService AlertService
@inject IMaintenanceService MaintenanceService
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<h1>Назначение исполнителя</h1>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col">
            <label>Укажите номер заявки</label>
            <InputText @bind-Value="model.Id" class="form-control" />
            <ValidationMessage For="@(() => model.Id)" />
        </div>
        <div class="form-group col">
            <label>Дата окончания работ</label>
            <InputDate @bind-Value="model.DateOfEnd" class="form-control" />
            <ValidationMessage For="@(() => model.DateOfEnd)" />
        </div>
        <div class="form-group col">
            <br>
            <label>Табельный номер сотрудника</label>
            <select @bind="model.User" class="form-select">
                @if (users != null)
                {
                    @foreach (var user in users)
                    {
                        <option @key="user.Id" value="@user.Id">@user.Id</option>
                    }
                }
            </select>

        </div>
        <div class="form-group col">
            <label>Комментарий к задаче</label>
            <InputText @bind-Value="model.Comment" class="form-control" />
            <ValidationMessage For="@(() => model.Comment)" />
        </div>
    </div>

    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>

            }
            В работу
        </button>
        <NavLink href="locations" class="btn btn-link">Отмена</NavLink>
    </div>

</EditForm>

@code {
    private bool loading;
    private EditMaintenance model = new EditMaintenance();
    private IList<Maintenance> maintenances;
    private IList<User> users;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        users = await AccountService.GetAll();
        model.User = int.Parse(users.First().Id);
        loading = false;
    }
    public async void OnValidSubmit()
    {
        loading = true;
        try
        {
            await MaintenanceService.Update(model.Id, model);
            AlertService.Success("Запись успешно добавлена", keepAfterRouteChange: true);
            NavigationManager.NavigateTo("maintenance");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}