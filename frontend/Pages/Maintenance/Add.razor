@page "/maintenance/add"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IAlertService AlertService
@inject IAccountService AccountService
@inject IRoleService RoleService
@inject IMachineService MachineService
@inject IStatusService StatusService
@inject IAppHistoryService AppHistoryService
@inject ITaskTypeService TaskTypeService
@inject ILocationService LocationService
@inject IMaintenanceService MaintenanceService

<h1>Создание записи</h1>
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">

    <div class="form-row">

        <div class="form-group col">
            <br>
            <label>Выберите номер участка</label>
            <select @bind="model.Location" class="form-select">
                @if (users != null)
                {
                    @foreach (var location in locations)
                    {
                        <option @key="location.Id" value="@location.Id">@location.Plot</option>
                        @*<option @key="location.Id" value="@location.Id">@location.Plot / @location.Plot</option>*@
                    }
                }
            </select>

        </div>
        <div class="form-group col">
            <br>
            <label>Выберите имя станка</label>
            <select @bind="model.Machine" class="form-select">
                @if (machines != null)
                {
                    @foreach (var machine in machines)
                    {
                        <option @key="machine.Id" value="@machine.Id">@machine.InventoryNumber</option>
                    }
                }
            </select>

        </div>
        <div class="form-group col">
            <br>
            <label>Выберите тип задачи</label>
            <select @bind="model.TaskType" class="form-select">
                @if (tasktypes != null)
                {
                    @foreach (var tasktype in tasktypes)
                    {
                        <option @key="tasktype.Id" value="@tasktype.Id">@tasktype.Name</option>
                    }
                }
            </select>
        </div>
        <div class="form-group col">

            <label>Комментарий</label>
            <InputText @bind-Value="model.Comment" />
            <ValidationMessage For="@(() => model.Comment)" />

        </div>

        @*<div class="form-group col">
                <br>
                <label>Табельный номер сотрудника</label>
                <select @bind="model.User" class="form-select">
                    @if (users != null)
                    {
                        @foreach (var user in users)
                        {
                            <option @key="user.Id" value="@user.Id">@user.Id</option>
                        }
                    }
                </select>
                            На этом этапе сотрудник - тот кто зашёл в систему и создал заявку:
                            Автор
            </div>*@




    </div>
    @*<div class="form-row">
            <div class="form-group col">
                <label>станок</label>
                <InputText @bind-Value="model.Machine" class="form-control" />
                <ValidationMessage For="@(() => model.Machine)" />
            </div>
            <div class="form-group col">
                <label>Сотрудник</label>
                <InputText @bind-Value="model.User" class="form-control" />
                <ValidationMessage For="@(() => model.User)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col">
                <label>Местоположение</label>
                <InputText @bind-Value="model.Location" class="form-control" />
                <ValidationMessage For="@(() => model.Location)" />
            </div>
            <div class="form-group col">
                <label>Новое состояние</label>
                <InputText @bind-Value="model.Status" class="form-control" />
                <ValidationMessage For="@(() => model.Status)" />
            </div>
        </div>*@
    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Сохранить
        </button>
        <NavLink href="maintenance" class="btn btn-link">Отмена</NavLink>
    </div>

</EditForm>

@code {

    public AddMaintenance model = new AddMaintenance();
    public AddAppHistory hmodel = new AddAppHistory();

    private bool loading;

    public IList<User> users;
    public IList<Maintenance> maintenances;
    public IList<Location> locations;
    public IList<Machine> machines;
    public IList<Status> statuses;
    public IList<TaskType> tasktypes;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        users = await AccountService.GetAll();
        model.User = users.First().Id;
        maintenances = await MaintenanceService.GetAll();

        machines = await MachineService.GetAll();
        model.Machine = machines.First().Id;
        locations = await LocationService.GetAll();
        model.Location = locations.First().Id;
        tasktypes = await TaskTypeService.GetAll();
        model.TaskType = tasktypes.First().Id;
        model.Status = "1";
        loading = false;
    }


    public async void OnValidSubmit()
    {
        loading = true;
        try
        {
            await MaintenanceService.Create(model);
            AlertService.Success("Запись успешно добавлена", keepAfterRouteChange: true);
            //hmodel.maintenance = int.Parse(maintenances.Last().Id) + 1;
            //await AppHistoryService.Create(hmodel);
            NavigationManager.NavigateTo("maintenance");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}